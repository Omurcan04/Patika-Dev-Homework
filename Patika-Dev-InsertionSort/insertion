Proje 1: Insertion Sort

Verilen dizi: [22, 27, 16, 2, 18, 6]

Aşamalar:

[22] (ilk eleman doğrudan sıralı bölüme eklenir)
[22, 27] (27, 22'den büyük olduğu için yer değiştirmez)
[16, 22, 27] (16, 22'den küçük olduğu için 22'nin önüne eklenir)
[2, 16, 22, 27] (2, 16'dan küçük olduğu için 16'nın önüne, ardından 22'den küçük olduğu için 22'nin önüne eklenir)
[2, 16, 18, 22, 27] (18, 16'dan büyük olduğu için yer değiştirmez)
[2, 6, 16, 18, 22, 27] (6, 2'den büyük olduğu için yer değiştirir)
Big-O Gösterimi: Insertion Sort'un Big-O karmaşıklığı O(n^2)'dir.

Time Complexity: Dizi sıralandıktan sonra 18 sayısı için:

Average case: Aradığımız sayının ortada olması (n/2)
Worst case: Aradığımız sayının sonda olması (n)
Best case: Aradığımız sayının dizinin en başında olması (1)
Dizinin ilk 4 adımı:

Verilen dizi: [7, 3, 5, 8, 2, 9, 4, 15, 6]

Selection Sort:

[2, 3, 5, 8, 7, 9, 4, 15, 6]
[2, 3, 5, 8, 7, 9, 4, 15, 6]
[2, 3, 4, 8, 7, 9, 5, 15, 6]
[2, 3, 4, 5, 7, 9, 8, 15, 6]


Proje 2: Merge Sort

Verilen dizi: [16, 21, 11, 8, 12, 22]

Aşamalar:

[16, 21, 11]  [8, 12, 22] .
[16]  [21, 11] .
[21]  [11] .
[8] [12, 22] .
[12]  [22] .
[11, 21] [8, 12, 22] .
[8, 11, 12, 21, 22] .
Big-O Gösterimi:O(n log n)'dir.

Bu aşamalardan sonra, dizi sıralanmış olur.

Proje 3
[7, 5, 1, 8, 3, 6, 0, 9, 4, 2] dizisinin Binary-Search-Tree aşamalarını yazınız.

Örnek: root x'dir. root'un sağından y bulunur. Solunda z bulunur vb.

Root 7'dir.
5, root'un solunda olduğu için root'un soluna eklenir.
1, root'un solunda olduğu için root'un soluna eklenir.
8, root'un sağına eklenir.
3, root'un solunda olduğu için 5'in sağına eklenir.
6, 5'in sağına eklenir.
0, 1'in solunda olduğu için 1'in soluna eklenir.
9, 8'in sağına eklenir.
4, 3'ün sağına eklenir.
2, 1'in sağına eklenir.


